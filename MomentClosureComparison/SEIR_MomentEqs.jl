function SEIR_ODE(X,Θ,t)

    S,E,I,R  = X
    p1,p2,p3 = Θ

    dX = [
          -p1 * S * I
           p1 * S * I - p2 * E
           p2 * E - p3 * I
           p3 * I
        ];

end

# Mean-field model requires the Patankar method to ensure positivity
function SEIR_MeanField(X,Θ,t)

    m1000,m0100,m0010,m0001,m2000,m0200,m0020,m0002,m1100,m1010,m1001,m0110,m0101,m0011 = X
    p1,p2,p3 = Θ

    P = [
             0.0
             p1 * m1010
             p2 * m0100
             p3 * m0010
             p1 * m1010
             2 * p1 * m0010 * m0100 * m1000 + p1 * m1010 + p2 * m0100
             p2 * m0100 + 2 * p2 * m0110 + p3 * m0010
             p3 * m0010 + 2 * p3 * m0011
             p1 * m1000^2 * m0010
             p2 * m1100
             p3 * m1010
             p1 * m1000 * m0010^2 + p2 * m0200
             p1 * m1000 * m0010 * m0001+ p3 * m0110
             p2 * m0101 + p3 * m0020
         ]

    D = [
            p1 * m1010
            p2 * m0100
            p3 * m0010
            0.0
            2 * p1 * m0010 * m1000^2
            2 * p2 * m0200
            2 * p3 * m0020
            0.0
            p1 * m1000 * m0100 * m0010 + p1 * m1010 + p2 * m1100
            p1 * m1000 * m0010^2 + p3 * m1010
            p1 * m1000 * m0010 * m0001
            p2 * m0100 + p2 * m0110 + p3 * m0110
            p2 * m0101
            p3 * m0010 + p3 * m0011
         ]

    return P,D

end

function SEIR_Gaussian(X,Θ,t)


    m1000,m0100,m0010,m0001,m2000,m0200,m0020,m0002,m1100,m1010,m1001,m0110,m0101,m0011 = X
    p1,p2,p3 = Θ

    dX = [
            -p1 * m1010
            p1 * m1010 - p2 * m0100
            p2 * m0100 - p3 * m0010
            p3 * m0010
            -2 * p1 * (-2 * m0010 * m1000^2 + 2 * m1000 * m1010 + m2000 * m0010) + p1 * m1010
            2 * p1 * (-2 * m0010 * m0100 * m1000 + m0110 * m1000 + m0100 * m1010 + m0010 * m1100) + p1 * m1010 + p2 * m0100 - 2 * p2 * m0200
            p2 * m0100 + 2 * p2 * m0110 + p3 * m0010 - 2 * p3 * m0020
            p3 * m0010 + 2 * p3 * m0011
            -p1 * (-2 * m0010 * m0100 * m1000 + m0110 * m1000 + m0100 * m1010 + m0010 * m1100) + p1 * (-2 * m0010 * m1000^2 + 2*m1000*m1010 + m0010 * m2000) - p1 * m1010 - p2 * m1100
            -p1 * (-2 * m0010^2 * m1000 + m0020 * m1000 + 2 * m0010 * m1010) + p2 * m1100 - p3 * m1010
            -p1 * (-2 * m0001 * m0010 * m1000 + m0011 * m1000 + m0010 * m1001 + m0001*m1010) + p3 * m1010
            p1 * (-2 * m0010^2 * m1000 + m0020 * m1000 + 2 * m0010 * m1010) - p2 * m0100 - p2 * m0110 + p2 * m0200 - p3 * m0110
            p1 * (-2 * m0001 * m0010 * m1000 + m0011 * m1000 + m0010 * m1001 + m0001 * m1010) - p2 * m0101 + p3 * m0110
            p2 * m0101 - p3 * m0010 - p3 * m0011 + p3 * m0020
         ]

end

function SEIR_Pairwise(X,Θ,t)


    m1000,m0100,m0010,m0001,m2000,m0200,m0020,m0002,m1100,m1010,m1001,m0110,m0101,m0011 = X
    p1,p2,p3 = Θ

    dX = [
            -m1010*p1
            -m0100*p2 + m1010*p1
            -m0010*p3 + m0100*p2
             m0010*p3
            (m1000*m1010*p1 - 2*m1010*m2000*p1)/m1000
            (m0100^2*p2 + 2*m0110*m1100*p1 - (2*m0200*p2 - m1010*p1)*m0100)/m0100
            (m0100 + 2*m0110)*p2 - 2*m0020*p3 + m0010*p3
            m0010*p3 + 2*m0011*p3
            (-((m1010*p1 + m1100*p2)*m1000 - m1010*m2000*p1)*m0100 - m0110*m1000*m1100*p1)/(m0100*m1000)
            (-(m1010*p3 - m1100*p2)*m0010 - m0020*m1010*p1)/m0010
            (m0010*m1010*p3 - m0011*m1010*p1) / m0010
            (-((p2 + p3)*m0110 - m0200*p2 + m0100*p2)*m0010 + m0020*m1010*p1)/m0010
            (-(m0101*p2 - m0110*p3)*m0010 + m0011*m1010*p1)/m0010
            m0020*p3 + m0101*p2 - m0011*p3 - m0010*p3
         ]

end
